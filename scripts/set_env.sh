#!/bin/bash
###############################################################################
# Django Set Env v1
# by kbruder Tech
###############################################################################
# Set user env variables expected by lookaway/settings.py
# This script is written for Ubuntu 20 LTS and should work on
# Most Debian-like OSes. 
# It will check your env_var_file (see below) to see 
# if the variables already exist before appending them.

# Set which file will read the variable assignments
# This assignment will be overwritten when pulling from the master repo
# but that should be all good because you should only need to run this
# script once per system.
env_var_file="/home/$USER/.bashrc"

# Uncomment the line below to test out the script on a safe file.
#env_var_file="foo_rc"

# Do NOT edit below this line! ################################################
###############################################################################

# Settings Paths
django_config="lookaway/settings.py"
pro_template="settings/production.py"
dev_template="settings/development.py"

copy_settings_template () {
    echo "Copy the ${2} settings template to \"$django_config\"? (yes, no)"
    read;
    if [ ${REPLY} == "yes" ]; then
        if [ -f ${1} ]; then
            cp ${1} $django_config
            if [ ! $? ]; then
                echo "copy failed!"
            else
                echo "copy successful"
            fi
        else
            echo "No ${2} settings template was found at \"${1}\". Aborting!"
        fi
    else
        echo "No settings template was copied to \"$django_config\"/"
    fi
}

insert_env () {
    if  ! egrep "^${1}=" $env_var_file > /dev/null; then
        echo "Enter ${2}: ";
        read;
        echo "${1}=\"${REPLY}\"" >> $env_var_file
        if [ $? ]; then
            echo "${1} $t2 \"$env_var_file\"."
        fi
    else
        echo "${1} $t1 \"$env_var_file\"."
        echo $t3
    fi
    echo $t4
}

# Help Text
t1="is already present in"
t2="is now assigned in"
t3="You must edit the file to change it."
t4="--------------------------------------------------------------------------"
h1="This script will add env variables to the file \"$env_var_file\". If you do not want this file to change, enter \"13\" to exit. If you would like to change the file in which to assign the env variables needed by \"lookaway/settings.py\", then edit this script and change \"\$env_var_file\", then run it again."
h2="You can always change these settings directly in the \"lookaway/settings.py\" file itself once one of the settings templates from the \"settings/\" has been copied to the aforementioned path. However, keeping sensitive data in the evironment rather than the settings file is more secure."

# Ensure needed files exist
if [ ! -f $env_var_file ]; then
    echo "\"$env_var_file\" does not exist! Please set the \"\$env_var_file\" in this script to a file that is sourced when the shell process starts then run it again."
    exit
fi

# If the Lookaway settings file does not exist (default installation)
# ask them if they want to copy a template that uses the env vars.
if [ ! -f $django_config ]; then
    echo "\"$django_config\" does not exist! Would you like to copy a template to that location now? (yes, no)"
    read;
    if [ ${REPLY} == "yes" ]; then
        templates=("Production" "Development")
        select template in "${templates[@]}"; do
            case $template in
                "Production")
                    copy_settings_template $pro_template "Production"
                    break
                    ;;
                "Development")
                    copy_settings_template $dev_template "Development"
                    break
                    ;;
            esac
        done
    else
        echo ""
        echo "I did not read \"yes\" so nothing was copied!"
        exit
    fi
fi
echo $t4

# Interactive Menu
echo $h1
echo ""
django_vars=("Django Secret Key (autogenerated)" "PostgreSQL Database Name" "PostgreSQL Database User" "PostgreSQL Database Password" "PostgreSQL Database Host" "PostgreSQL Database Port Number" "Email \"from\" Name" "Email Server User" "Email Server Password" "Email Server Host" "Email Server Port" "Django Log File" "Exit")
select var in "${django_vars[@]}"; do
    case $var in
        "Django Secret Key (autogenerated)")
            # Django Secret Key
            if ! egrep "^DJANGO_SECRET_KEY=" $env_var_file > /dev/null ; then
                echo $USER
                echo "export DJANGO_SECRET_KEY=\"$(./make_key.py)\"" >> $env_var_file
            if [ $? ]; then
                echo "DJANGO_SECRET_KEY $t2 \"$env_var_file\"."
            fi
        else
            echo "DJANGO_SECRET_KEY $t1 \"$env_var_file\"."
            echo $t3
        fi
        echo $t4
        ;;
        # PostgreSQL Database
        "PostgreSQL Database Name")
            ## Database Name
            insert_env "export DJANGO_DATABASE_NAME" "the name of the PostgreSQL database"
            ;;
        "PostgreSQL Database User")
            ## Database User
            insert_env "export DJANGO_DATABASE_USER" "the name of the PostgreSQL user"
            ;;
        "PostgreSQL Database Password")
            ## Database Password
            insert_env "export DJANGO_DATABASE_PASSWORD" "the PostgreSQL user password"
            ;;
        "PostgreSQL Database Host")
            ## Database Host
            insert_env "export DJANGO_DATABASE_HOST" "the PostgreSQL host"
            ;;
        "PostgreSQL Database Port Number")
            ## Database Port
            insert_env "export DJANGO_DATABASE_PORT" "the PostgreSQL host port number"
            ;;
        # Email
        "Email \"from\" Name")
            ## Email From
            insert_env "export ES_FROM" "the name of the sender for the automated password recovery service"
            ;;
        "Email Server User")
            ## Email Host
            insert_env "export ES_HOST" "the Email Server host"
            ;;
        "Email Server Port")
            ## Email Port
            insert_env "export ES_PORT" "the Email Server port"
            ;;
        "Email Server Host")
            ## Email User
            insert_env "export ES_USER" "the name of the Email Server user"
            ;;
        "Email Server Password")
            ## Email Password
            insert_env "export ES_PASS" "the Email Server user password"
            ;;
        "Django Log File")
            ## Log File
            insert_env "export DJANGO_LOG_PATH" "the path to the file where log entries will be written"
            ;;
        "Exit")
            echo $h2
            echo "Bye!"
            exit
            ;;
        *)
            echo "Invalid option, \"$REPLY\"."
            break
            ;;
    esac
done
